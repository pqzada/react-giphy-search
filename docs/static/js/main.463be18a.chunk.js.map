{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","_ref","setCategories","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","react_default","a","createElement","onSubmit","e","preventDefault","trim","length","cats","concat","toConsumableArray","type","value","onChange","target","getGifs","asyncToGenerator","_regeneratorRuntime","mark","_callee","category","url","resp","_yield$resp$json","data","gifs","wrap","_context","prev","next","encodeURI","fetch","sent","json","map","img","id","title","images","downsized_medium","abrupt","stop","_x","apply","this","arguments","GifGridItem","className","src","alt","GifGrid","_useFetchGifs","loading","state","setState","useEffect","then","imgs","useFetchGifs","Fragment","GifGridItem_GifGridItem","assign","key","GifExpertApp","categories","AddCategory_AddCategory","GifGrid_GifGrid","ReactDOM","createRoot","document","getElementById","render","GifExpertApp_GifExpertApp"],"mappings":"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","file":"static/js/main.463be18a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=QIyIrIkJhAi9vKriNcseq60UKYfM06Hq`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import PropTypes from 'prop-types';\nimport React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nGifGridItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n}","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n            {loading && <p className='animate__animated animate__flash'>Loading...</p>}\n            <div className='card-grid'>\n                {\n                    images.map((img) => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img} />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            });\n    }, [category])\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch Man']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid\n                            key={category}\n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <GifExpertApp />\n);"],"sourceRoot":""}